---
- name: "install plugin dependencies with apt"
  apt:
    name: "{{ asdf_apt_optional_dependencies }}"
    install_recommends: no
    cache_valid_time: "{{ apt_cache_valid_time }}"
  retries: "{{ remote_package_retries }}"
  register: apt_result
  until: apt_result is succeeded
  become: True
  when: ansible_os_family == "Debian"

- name: "install plugin dependencies with yum"
  yum:
    name: "{{ asdf_yum_optional_dependencies }}"
  retries: "{{ remote_package_retries }}"
  register: yum_result
  until: yum_result is succeeded
  become: True
  when: ansible_os_family == "RedHat"

- name: "install plugins"
  command: "bash -lc 'source /etc/profile.d/asdf.sh && asdf plugin-add {{ item.name }} {{ item.repository | default() }}'"
  args:
    creates: "{{ asdf_dir }}/plugins/{{ item.name }}"
  with_items: "{{ asdf_plugins }}"
  when: asdf_plugins | length > 0
  become: True
  become_user: "{{ asdf_user }}"
  ignore_errors: True

- name: "nodejs specific tasks"
  include_tasks: "plugins/nodejs.yml"
  when: '"nodejs" in item["name"]'
  with_items: "{{ asdf_plugins }}"

- name: "erlang specific tasks"
  include_tasks: "plugins/erlang.yml"
  when: '"erlang" in item["name"]'
  with_items: "{{ asdf_plugins }}"

- name: "ruby specific tasks"
  include_tasks: "plugins/ruby.yml"
  when: '"ruby" in item["name"]'
  with_items: "{{ asdf_plugins }}"

- name: "php specific tasks"
  include_tasks: "plugins/php.yml"
  when: '"php" in item["name"]'
  with_items: "{{ asdf_plugins }}"

- name: "install apps"
  command: "bash -lc 'source /etc/profile.d/asdf.sh && asdf install {{ item.0.name }} {{ item.1 }}'"
  args:
    creates: "{{ asdf_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  with_subelements:
    - "{{ asdf_plugins }}"
    - versions
    - flags:
      skip_missing: True
  when: asdf_plugins | length > 0
  become: True
  become_user: "{{ asdf_user }}"

- name: "uninstall apps"
  command: "bash -lc 'source /etc/profile.d/asdf.sh && asdf uninstall {{ item.0.name }} {{ item.1 }}'"
  args:
    removes: "{{ asdf_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  with_subelements:
    - "{{ asdf_plugins }}"
    - delete_versions
    - flags:
      skip_missing: True
  when: asdf_plugins | length > 0
  become: True
  become_user: "{{ asdf_user }}"

- name: "check global app versions"
  shell: |
    source /etc/profile.d/asdf.sh
    cat {{ ansible_env.ASDF_DEFAULT_TOOL_VERSIONS_FILENAME }} | grep "^${TOOL_NAME}\s*" | grep "\s*${TOOL_VERSION}\(\s*\|$\)" | tr -s "[:blank:]" _
  args:
    executable: /bin/bash
  when: item.versions is defined
  with_items: "{{ asdf_plugins }}"
  register: asdf_global
  changed_when: false
  become: True
  become_user: "{{ asdf_user }}"

- name: "set missing global app versions"
  command: "bash -lc 'source /etc/profile.d/asdf.sh && asdf global {{ item.name }} {{ item | get_asdf_global_version }}'"
  when: >
    item.versions is defined
    and '_'.join((item.name,  item | get_asdf_global_version | string)) not in (asdf_global.results|map(attribute="stdout_lines") | list | flatten)
  with_items: "{{ asdf_plugins }}"
  become: True
  become_user: "{{ asdf_user }}"

- name: "set asdfrc"
  template:
    src: "asdfrc.j2"
    dest: "{{ asdf_config_file }}"
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
    mode: 0644
  become: True
  become_user: "{{ asdf_user }}"

- name: "set group permissions"
  become: yes
  file:
    path: "{{ asdf_dir }}"
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
    state: directory
    recurse: yes
